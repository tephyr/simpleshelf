# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=simpleshelf_project
# This also sets the network name, so changing COMPOSE_PROJECT_NAME when you have
# multiple projects on the same machine is required.

# You should generate a random string of 64+ characters for this value in prod.
# You can generate secure secrets by running: ./run secret
export SECRET_KEY=insecure_key_for_dev

# Which environment is running? It should be "development" or "production".
#export NODE_ENV=production
export NODE_ENV=development

# The bind port for the node server.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#export PORT=8000

# The bind port(s) for CouchDB.
# 
# Use a single port number to disallow external access: "5984".
# export DOCKER_COUCHDB_PORTS="5984"
export DOCKER_COUCHDB_PORTS="8081:5984"

# The username/password for CouchDB's admin.
# 
# These values are required for initial access to CouchDB, and to prevent the
# insecure "admin party" mode.
export COUCHDB_USER=REQUIRED
export COUCHDB_PASSWORD=REQUIRED

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/up
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change 8000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
export DOCKER_WEB_PORT_FORWARD=8000

# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public:/app/public
export DOCKER_WEB_VOLUME=.:/app

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#export DOCKER_WEB_CPUS=0
#export DOCKER_WEB_MEMORY=0
